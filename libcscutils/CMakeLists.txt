PROJECT(libcscutils)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
ENABLE_LANGUAGE(Fortran)


#Options
OPTION(DEBUG "Debug Mode" OFF)
OPTION(BUILD_SHARED_LIBS OFF)
OPTION(DOCS   "Build API documentation" ON)


IF(NOT ${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})
    MESSAGE(STATUS "libcscutils in project build")
    SET(BUILD_SHARED_LIBS OFF)
    SET(DOCS OFF)
    SET(INPROJECT TRUE)
ENDIF()

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")


IF( NOT CMAKE_BUILD_TYPE )
    SET( CMAKE_BUILD_TYPE "Release" )
ENDIF()

IF(DEBUG STREQUAL ON)
    SET( CMAKE_BUILD_TYPE "Debug" )
ENDIF()

#Options for the IO
OPTION(CSC_IO_ZLIB  "Build ZLIB IO Support" ON)
OPTION(CSC_IO_BZIP2 "Build BZIP2 IO Support" ON)
OPTION(CSC_IO_LIBLZMA "Build LZMA IO Support" ON)
OPTION(CSC_IO_MMAP "Build with MMAP Support" OFF)

# Setup destination
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
FILE(COPY ${PROJECT_SOURCE_DIR}/include DESTINATION ${PROJECT_BINARY_DIR})
SET(CMAKE_Fortran_MODULE_DIRECTORY "${PROJECT_BINARY_DIR}/include/cscutils")

# Required Addons
INCLUDE(CheckIncludeFiles)
INCLUDE(CCompilerSettings)
INCLUDE(CXXCompilerSettings)

# Compile Options
SET(LIBS ${LIBRARIES} "m")
SET(INCLUDE_DIR ${INCLUDE_DIR})

# Include Helpers
INCLUDE(CheckTypeSize)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckAttributeExists)
INCLUDE(CheckFeatureNeeded)
INCLUDE(ExternalProject)
INCLUDE(CheckSymbolExists)
INCLUDE(CheckCCompilerFlag)
INCLUDE(CheckBlasZdotcMKL)

#
# DECOMPOSE_FEATURES
#
IF(NOT CSCUTILS_FEATURES)
    SET(CSCUTILS_FEATURES "inifile;io;threading;hdf5;image;hardware;ds;trace")
ENDIF()

FOREACH(FEAT ${CSCUTILS_FEATURES})
    MESSAGE(STATUS "Enable module: ${FEAT}")
    STRING(TOUPPER ${FEAT} _FEAT)
    SET(${_FEAT}_ENABLE TRUE)
ENDFOREACH()

#
#  Check for compiler features
#
CHECK_ATTRIBUTE_EXISTS(constructor HAVE_ATTR_CONSTRUCTOR)
IF(HAVE_ATTR_CONSTRUCTOR)
    ADD_DEFINITIONS(-DHAVE_ATTR_CONSTRUTOR)
ENDIF()


#
# Check for Libraries
#
MACRO(CHECK_LIB PREFIX PACKAGE_NAME NO_DEFINE)
    STRING(TOUPPER ${PACKAGE_NAME} _PACKAGE_NAME)
    IF(NOT ${PREFIX}_${_PACKAGE_NAME} STREQUAL OFF)
        FIND_PACKAGE(${PACKAGE_NAME})
        IF(${_PACKAGE_NAME}_FOUND)
            SET(INCLUDE_DIR ${INCLUDE_DIR} ${${_PACKAGE_NAME}_INCLUDE_DIR})
            SET(LIBS ${${_PACKAGE_NAME}_LIBRARIES} ${LIBS})
            MESSAGE(STATUS "${PACKAGE_NAME} found (LIB = ${${_PACKAGE_NAME}_LIBRARIES}, INCLUDE = ${${_PACKAGE_NAME}_INCLUDE_DIR})")
        ELSE()
            MESSAGE(STATUS "${PACKAGE_NAME} not found. Deactivating.")
            ADD_DEFINITIONS(-D${NO_DEFINE})
        ENDIF()
    ELSE()
        ADD_DEFINITIONS(-D${NO_DEFINE})
    ENDIF()
    UNSET(${_PACKAGE_NAME})
ENDMACRO()

MACRO(CHECK_FUNC FUNC)
    STRING(TOUPPER ${FUNC} _FUNC)
    CHECK_FUNCTION_EXISTS(${FUNC} HAVE_${_FUNC})
    IF( HAVE_${_FUNC} )
        ADD_DEFINITIONS(-DHAVE_${_FUNC})
    ENDIF()
    UNSET(_FUNC)
ENDMACRO()

# Generic Stuff
FIND_PACKAGE(Threads REQUIRED)
SET(LIBS ${LIBS} ${CMAKE_THREAD_LIBS_INIT})
SET(_X ${CMAKE_REQUIRED_LIBRARIES})
SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_REQUIRED_LIBRARIES})
IF(CMAKE_USE_PTHREADS_INIT)
    ADD_DEFINITIONS(-DHAVE_PTHREAD)
    CHECK_FEATURE_NEEDED(pthread_yield pthread.h HAVE_PTHREAD_YIELD PTHREAD_YIELD_FEATURE)
    IF(HAVE_PTHREAD_YIELD)
        ADD_DEFINITIONS("${PTHREAD_YIELD_FEATURE}")
    ENDIF()
ENDIF()
SET(CMAKE_REQUIRED_LIBRARIES ${_X})

#
# Common FEATURES
#
CHECK_INCLUDE_FILES(execinfo.h HAVE_EXECINFO)
CHECK_FUNCTION_EXISTS(backtrace HAVE_BACKTRACE)
CHECK_FUNCTION_EXISTS(backtrace_symbols HAVE_BACKTRACE_SYMBOLS)
IF(HAVE_EXECINFO AND HAVE_BACKTRACE AND HAVE_BACKTRACE_SYMBOLS)
    MESSAGE(STATUS "Enable csc_show_backtrace.")
    ADD_DEFINITIONS(-DHAVE_BACKTRACE)
ELSE()
    MESSAGE(STATUS "csc_show_backtrace not enabled.")
ENDIF()

CHECK_FEATURE_NEEDED(strnlen string.h HAVE_STRNLEN STRNLEN_FEATURE "_WITH_STRNLEN")
IF( HAVE_STRNLEN )
    ADD_DEFINITIONS("${STRNLEN_FEATURE}")
ELSE()
    MESSAGE(FATAL_ERROR "Did not find strnlen")
ENDIF()

CHECK_FEATURE_NEEDED(strndup string.h HAVE_STRNDUP STRNDUP_FEATURE "_WITH_STRNDUP")
IF( HAVE_STRNLEN )
    ADD_DEFINITIONS("${STRNDUP_FEATURE}")
ELSE()
    MESSAGE(FATAL_ERROR "Did not find strndup")
ENDIF()


# check needed include files for csc_get_term_width
CHECK_INCLUDE_FILES(sys/ioctl.h _IOCTLH)
IF(_IOCTLH)
    ADD_DEFINITIONS(-DHAVE_IOCTL)
ENDIF()

CHECK_INCLUDE_FILES(unistd.h    _UNISTDH)
IF(_UNISTDH)
    ADD_DEFINITIONS(-DHAVE_UNISTD)
ENDIF()



IF(INIFILE_ENABLE)
    CHECK_FEATURE_NEEDED(getline stdio.h HAVE_GETLINE GETLINE_FEATURE "_WITH_GETLINE")
    IF( HAVE_GETLINE )
        ADD_DEFINITIONS("${GETLINE_FEATURE}")
    ELSE()
        MESSAGE(FATAL_ERROR "getline not found")
    ENDIF()
    CHECK_FEATURE_NEEDED(realpath stdlib.h HAVE_REALPATH REALPATH_FEATURE)
    IF(HAVE_REALPATH)
        ADD_DEFINITIONS("${REALPATH_FEATURE}")
    ELSE()
        MESSAGE(FATAL_ERROR "realpath not found")
    ENDIF()
ENDIF()

IF(IO_ENABLE)
    # IO_ZLIB
    CHECK_LIB(CSC_IO ZLIB NO_GZ)
    CHECK_LIB(CSC_IO BZip2 NO_BZ2)
    CHECK_LIB(CSC_IO LibLZMA NO_XZ)
    CHECK_FUNC(vsscanf)
    CHECK_FUNC(vsnprintf)

    CHECK_INCLUDE_FILES(sys/types.h _SYS_TYPES)
    IF(_SYS_TYPES)
        SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} sys/types.h)
    ENDIF()
    CHECK_INCLUDE_FILES(sys/stat.h  _SYS_STAT)
    IF(_SYS_STAT)
        SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} sys/stat.h)
    ENDIF()
    CHECK_INCLUDE_FILES(fcntl.h     _FCNTL)
    IF(_FCNTL)
        SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} fcntl.h)
    ENDIF()
    CHECK_INCLUDE_FILES(sys/mman.h     _SYS_MMAN)
    IF(_SYS_MMAN)
        SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} sys/mman.h)
    ENDIF()
    CHECK_INCLUDE_FILES(unistd.h     _UNISTD)
    IF(_UNISTD)
        SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} unistd.h)
    ENDIF()

    CHECK_FUNCTION_EXISTS(open _HAVE_OPEN)
    CHECK_FUNCTION_EXISTS(mmap _HAVE_MMAP)
    CHECK_FUNCTION_EXISTS(lseek _HAVE_LSEEK)
    SET(CSC_IO_MMAP_IO FALSE)
    IF( CSC_IO_MMAP AND _HAVE_LSEEK AND _HAVE_MMAP AND _HAVE_OPEN ) #CSC_IO_MMAP is an option which can be turned off
        SET(CSC_IO_MMAP_IO TRUE)
        MESSAGE(STATUS "Enable MMAP-IO")
        ADD_DEFINITIONS(-DCSC_IO_MMAP_IO)
    ELSE()
        SET(CSC_IO_MMAP_IO FALSE)
    ENDIF()

ENDIF()

IF(HDF5_ENABLE)
    FIND_PACKAGE(HDF5 COMPONENTS C HL REQUIRED)
    SET(LIBS ${LIBS} ${HDF5_LIBRARIES} ${HDF5_HL_LIBRARIES})
    SET(INCLUDE_DIR ${INCLUDE_DIR} ${HDF5_INCLUDE_DIRS})
    ADD_DEFINITIONS(${HDF5_DEFINITIONS})
ENDIF()

IF(HARDWARE_ENABLE)
    FIND_PACKAGE(CPUFREQ)
    IF(CPUFREQ_FOUND)
        SET(LIBS ${CPUFREQ_LIBRARIES} ${LIBS})
        INCLUDE_DIRECTORIES(${CPUFREQ_INCLUDE_DIR})
        ADD_DEFINITIONS(-DHAVE_CPUFREQ)
    ELSE()
        MESSAGE("CPUFREQ not found. Either cpufreq.h or libcpupower.so is missing.")
    ENDIF()
ENDIF()

IF(TRACE_ENABLE)
    FIND_PACKAGE(OpenMP)
    IF(OPENMP_FOUND)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_Fortran_FLAGS}")
ENDIF()

ENDIF()

# Find additional Libraries
ADD_SUBDIRECTORY(src)
IF(NOT INPROJECT)
    ADD_SUBDIRECTORY(examples)
ENDIF()

IF(DOCS STREQUAL ON)
    SET(DOXYFILE_OUTPUT_DIR "${CMAKE_BINARY_DIR}/doc")
    SET(DOXYFILE_LATEX_DIR  "${CMAKE_BINARY_DIR}/doc/latex")
    SET(LATEX_COMPILER "pdflatex")
    # set(DOXYFILE_EXTRA_SOURCES "${CMAKE_SOURCE_DIR}/documents/category.dox")
    SET(DOXYFILE_LATEX OFF)
    SET(DOXYFILE_GENERATE_LATEX YES)
    SET(USE_PDFLATEX YES)

    #set(PROJECT_VERSION ${MESS_VERSION})

    INCLUDE(UseDoxygen OPTIONAL)
    #  IF ( DOXYGEN_FOUND )
    #  file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/doc/html/misc)
    #  file(COPY ${CMAKE_SOURCE_DIR}/documents/doc_style.css DESTINATION  ${CMAKE_BINARY_DIR}/doc/html/misc/)
    #ENDIF (DOXYGEN_FOUND)
ENDIF()

